{"version":3,"sources":["helpers/fetch.js","types/types.js","actions/auth.js","hooks/useForm.js","components/auth/LoginPage.js","helpers/prepareEvents.js","actions/eventsCalendar.js","components/ui/Navbar.js","components/calendar/CalendarEvent.js","actions/ui.js","components/calendar/CalendarModal.js","components/ui/AddNewFabButton.js","components/ui/DeleteFabButton.js","components/calendar/CalendarPage.js","router/PrivateRoute.js","router/PublicRoute.js","router/AppRouter.js","reducers/authReducer.js","reducers/calendarReducer.js","reducers/uiReducers.js","reducers/rootReducer.js","store/store.js","Calendar.js","index.js"],"names":["baseUrl","process","fetchWithoutToken","endpoint","data","method","url","fetch","headers","body","JSON","stringify","fetchWithToken","token","localStorage","getItem","types","uiOpenModal","uiCloseModal","eventStartAddNew","eventAddNew","eventUpdate","eventDelete","eventLoaded","eventSetActive","eventClearActive","eventClearOnLogout","authCheking","authChekingFinish","authStartLogin","authLogin","authStartRegister","authStartTokenRenew","authLogout","checkingFinish","type","login","user","payload","logout","useForm","initialState","useState","formState","setFormState","reset","handlerInput","target","name","value","LoginPage","loginEmail","loginPassword","formLoginState","handlerLoginForm","dispatch","useDispatch","registerName","registerEmail","registerPassword","registerPasswordConfirm","formRegisterState","hanlderRegisterForm","className","onSubmit","event","preventDefault","email","password","toLowerCase","a","response","json","ok","setItem","Date","getTime","uid","errorMessage","msg","errors","Swal","fire","startLogin","placeholder","onChange","resposne","values","prepareEvents","events","map","end","moment","toDate","start","Navbar","useSelector","state","auth","onClick","clear","CalendarEvent","title","id","activeEvent","calendar","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","now","minutes","seconds","add","initialEvent","notes","CalendarModal","startDate","setStartDate","endDate","setEndtDate","formValues","setFormValues","modalOpen","ui","useEffect","closeModal","handlerChangeForm","overlayClassName","closeTimeoutMS","isOpen","onRequestClose","style","contentLabel","momentStart","momentEnd","isSameOrAfter","trim","length","bodyResponse","console","log","startUpdateEvent","getState","_id","startAddNewEvent","minDate","autoComplete","rows","AddNewFabButton","DeleteFabButton","localizer","momentLocalizer","CalendarPage","lastView","setLastView","startAccessor","endAccessor","eventPropGetter","isSlected","backgroundColor","borderRadius","opacity","display","color","components","onSelectSlot","selectable","view","onDoubleClickEvent","onSelectEvent","onView","PrivateRoute","isAuthenticated","Component","component","rest","location","pathname","search","props","to","PublicRoute","AppRouter","checking","exact","path","authReducer","action","calendarReducer","filter","uiReducer","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Calendar","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.144eac92.chunk.js","sourcesContent":["const baseUrl = process.env.REACT_APP_API_URL;\n\nconst fetchWithoutToken = (endpoint, data, method = 'GET') => {\n\n    const url = `${baseUrl}/${endpoint}`;\n    if (method === 'GET') {\n        return fetch(url);\n    } else {\n        return fetch(url, {\n            method,\n            headers: {\n                'Content-type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        });\n    }\n}\n\nconst fetchWithToken = (endpoint, data, method = 'GET') => {\n\n    const url = `${baseUrl}/${endpoint}`;\n    const token = localStorage.getItem('token') || '';\n    if (method === 'GET') {\n        return fetch(url, {\n            method,\n            headers: {\n                'x-web-token': token\n            }\n        });\n    } else {\n        return fetch(url, {\n            method,\n            headers: {\n                'Content-type': 'application/json',\n                'x-web-token': token\n            },\n            body: JSON.stringify(data)\n        });\n    }\n}\n\nexport {\n    fetchWithoutToken,\n    fetchWithToken\n}\n","const types = {\n    uiOpenModal: '[UI] Open Modal',\n    uiCloseModal: '[UI] Close Modal',\n\n    eventStartAddNew: '[Event] Start Add New',\n    eventAddNew: '[Event] Add New',\n    eventUpdate: '[Event] Update',\n    eventDelete: '[Event] Delete',\n\n    eventLoaded: '[Event] Event Loaded',\n\n\n    eventSetActive: '[Event] Set Active',\n    eventClearActive: '[Event] Clear Active',\n\n    eventClearOnLogout: '[Event] Clear All Events to Logout',\n\n    authCheking: '[Auth] Checking Login state',\n    authChekingFinish: '[Auth] Finish Checking Login state',\n    authStartLogin: '[Auth] Start Login',\n    authLogin: '[Auth] Login',\n    authStartRegister: '[Auth] Start Register',\n    authStartTokenRenew: '[Auth] Start Token Renew',\n    authLogout: '[Auth] Logout'    \n}\n\nexport default types\n","import Swal from \"sweetalert2\";\nimport { fetchWithoutToken, fetchWithToken } from \"../helpers/fetch\"\nimport types from \"../types/types\";\n\nexport const startLogin = (email, password) => {\n    const data = {\n        email: email.toLowerCase(),\n        password: password.toLowerCase()\n    };\n    return async (dispatch) => {\n        const response = await fetchWithoutToken('auth', data, 'POST');\n        const body = await response.json();\n        if (body.ok) {\n            localStorage.setItem('token', body.token);\n            localStorage.setItem('token-init-date', new Date().getTime());\n            dispatch(\n                login({\n                    uid: body.uid,\n                    name: body.name\n                })\n            );\n        } else {\n            const errorMessage = body.msg? body.msg : body.errors.errors[0].msg;\n            Swal.fire('Error', errorMessage, 'error');\n        }\n    }\n}\n\nexport const startRegister = (email, password, name) => {\n    return async (dispatch) => {\n        const data = {\n            email,\n            password,\n            name\n        }\n        const resposne = await fetchWithoutToken('auth/register', data, 'POST');\n        const body = await resposne.json();\n        if (body.ok) {\n            localStorage.setItem('token', body.token);\n            localStorage.setItem('token-init-date', new Date().getTime());\n            dispatch(\n                login({\n                    uid: body.uid,\n                    name: body.name\n                })\n            );\n        } else {\n            const errorMessage = body.msg? body.msg : body.errors.errors[0].msg;\n            Swal.fire('Error', errorMessage, 'error');\n        }\n    }\n}\n\nexport const startChecking = () => {\n    return async (dispatch) => {\n        const resposne = await fetchWithToken('auth/renew');\n        const body = await resposne.json();\n        if (body.ok) {\n            localStorage.setItem('token', body.token);\n            localStorage.setItem('token-init-date', new Date().getTime());\n            dispatch(\n                login({\n                    uid: body.uid,\n                    name: body.name\n                })\n            );\n        } else {\n            dispatch(checkingFinish());\n        }\n    }\n}\n\nexport const startLogout = () => {\n    return (dispatch) => {\n        localStorage.clear();\n        dispatch(logout());\n    }\n}\n\nconst checkingFinish = () => ({\n    type: types.authChekingFinish\n})\n\nconst login = (user) => ({\n    type: types.authLogin,\n    payload: user\n});\n\nconst logout = () => ({\n    type: types.authLogout\n})","import {useState} from 'react';\n\nconst useForm = (initialState = {}) => {\n\n  const [formState, setFormState] = useState(initialState);\n\n  const reset = () => {\n    setFormState(initialState);\n  }\n\n  const handlerInput = ({ target }) => {\n    setFormState({\n      ...formState,\n      [target.name]: target.value\n    });\n  }\n  \n\n  return ([\n    formState,\n    handlerInput,\n    reset\n  ]);\n}\n\nexport default useForm\n","import React from 'react';\nimport {useDispatch} from 'react-redux';\nimport Swal from 'sweetalert2';\nimport { startLogin, startRegister } from '../../actions/auth';\nimport useForm from '../../hooks/useForm';\nimport './login.css';\n\nconst LoginPage = () => {\n\n    /* Login State and Handlers */\n    const [formLoginState, handlerLoginForm] = useForm({\n        loginEmail: '',\n        loginPassword: ''\n    });\n\n    const {loginEmail, loginPassword} = formLoginState;\n\n    const dispatch = useDispatch();\n\n    const handlerLoginSubmit = (event) => {\n        event.preventDefault();\n        dispatch(\n            startLogin(loginEmail, loginPassword)\n        );\n    }\n\n    /* Register State and Handlers */\n    const [formRegisterState, hanlderRegisterForm] = useForm({\n        registerName: '',\n        registerEmail: '',\n        registerPassword: '',\n        registerPasswordConfirm: '',\n    });\n\n    const {\n        registerName,\n        registerEmail,\n        registerPassword,\n        registerPasswordConfirm } = formRegisterState;\n\n    const handlerRegisterSubmit = (event) => {\n        event.preventDefault();\n        if (registerPassword !== registerPasswordConfirm) {\n            Swal.fire('Error', 'Password fields must be identical');\n        } else {\n            dispatch(\n                startRegister(\n                    registerEmail,\n                    registerPassword,\n                    registerName\n                )\n            );\n        }\n    }\n\n    return (\n        <div className=\"container login-container\">\n            <div className=\"row\">\n                {/* Login section */}\n                <div className=\"col-md-6 login-form-1\">\n                    <h3>Login</h3>\n                    <form onSubmit={handlerLoginSubmit}>\n                        <div className=\"form-group\">\n                            <input \n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Correo\"\n                                name='loginEmail'\n                                value={loginEmail}\n                                onChange={handlerLoginForm}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                placeholder=\"Contraseña\"\n                                name='loginPassword'\n                                value={loginPassword}\n                                onChange={handlerLoginForm}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input \n                                type=\"submit\"\n                                className=\"btnSubmit\"\n                                value=\"Login\" \n                            />\n                        </div>\n                    </form>\n                </div>\n                {/* Register Section */}\n                <div className=\"col-md-6 login-form-2\">\n                    <h3>Registro</h3>\n                    <form onSubmit={handlerRegisterSubmit}>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Nombre\"\n                                name=\"registerName\"\n                                value={registerName}\n                                onChange={hanlderRegisterForm}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"email\"\n                                className=\"form-control\"\n                                placeholder=\"Correo\"\n                                name=\"registerEmail\"\n                                value={registerEmail}\n                                onChange={hanlderRegisterForm}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                placeholder=\"Contraseña\"\n                                name=\"registerPassword\"\n                                values={registerPassword}\n                                onChange={hanlderRegisterForm}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                placeholder=\"Repita la contraseña\"\n                                name=\"registerPasswordConfirm\"\n                                values={registerPasswordConfirm}\n                                onChange={hanlderRegisterForm}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <input \n                                type=\"submit\" \n                                className=\"btnSubmit\" \n                                value=\"Crear cuenta\" />\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LoginPage","import moment from 'moment';\n\nexport const prepareEvents = (events = []) => {\n    return events.map(\n        (event) => ({\n            ...event,\n            end: moment(event.end).toDate(),\n            start: moment(event.start).toDate()\n        })\n    );\n}","import Swal from \"sweetalert2\";\nimport { fetchWithToken } from \"../helpers/fetch\";\nimport { prepareEvents } from \"../helpers/prepareEvents\";\nimport types from \"../types/types\";\n\nexport const startAddNewEvent = (event) => {\n    return async (dispatch, getState) => {\n\n        const {uid, name} = getState().auth;\n\n        try {\n            const response = await fetchWithToken('events', event, 'POST');\n            const bodyResponse = await response.json();\n            if (bodyResponse.ok) {\n                event.id = bodyResponse.event.id;\n                event.user = {\n                    _id: uid,\n                    name: name\n                }\n                dispatch(\n                    eventAddNew(event)\n                );\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nexport const startLoadingEvent = () => {\n    return async (dispatch) => {\n        try {\n            const response = await fetchWithToken('events');\n            const bodyResponse = await response.json();\n            const events = prepareEvents(bodyResponse.event);\n            dispatch(\n                eventLoaded(events)\n            )\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nexport const startUpdateEvent = (event) => {\n    return async (dispatch) => {\n        try {\n            const response = await fetchWithToken(`events/${event.id}`, event, 'PUT');\n            const bodyResponse = await response.json();\n            if (bodyResponse.ok) {\n                dispatch(\n                    eventUpdate(event)\n                )\n            } else {\n                Swal.fire('Error', bodyResponse.msg, 'error');\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nexport const startDeleteEvent = () => {\n    return async (dispatch, getState) => {\n        const {id} = getState().calendar.activeEvent;\n        try {\n            const response = await fetchWithToken(`events/${id}`, {}, 'DELETE');\n            const bodyResponse = await response.json();\n            if (bodyResponse.ok) {\n                dispatch(\n                    eventDelete()\n                )\n            } else {\n                Swal.fire('Error', bodyResponse.msg, 'error');\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nconst eventLoaded = (events) => ({\n    type: types.eventLoaded,\n    payload: events\n})\n\nconst eventAddNew = (event) => ({\n    type: types.eventAddNew,\n    payload: event\n});\n\nconst eventUpdate = (event) => ({\n    type: types.eventUpdate,\n    payload: event\n});\n\nconst eventDelete = () => ({\n    type: types.eventDelete\n});\n\n\nexport const eventSetActive = (event) => ({\n    type: types.eventSetActive,\n    payload: event\n});\n\nexport const eventClearActive = () => ({\n    type: types.eventClearActive\n});\n\n\nexport const eventClearOnLogout = () => ({\n    type: types.eventClearOnLogout\n})","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { startLogout } from '../../actions/auth';\nimport { eventClearOnLogout } from '../../actions/eventsCalendar';\n\nconst Navbar = () => {\n\n    const {name} = useSelector(state => state.auth);\n\n    const dispatch = useDispatch();\n\n\n    const handlerLogout = () => {\n        dispatch(\n            startLogout()\n        );\n        dispatch(\n            eventClearOnLogout()\n        );\n    }\n    return (\n        <div className=\"navbar navbar-dark bg-dark mb-4\">\n            <span className=\"navbar-brand\">\n                {name}\n            </span>\n            <button\n                className=\"btn btn-outline-danger\"\n                onClick={handlerLogout}\n            >\n                <i className=\"fas fa-sign-out-alt\" />\n                <span> Exit</span>\n            </button>\n        </div>\n    )\n}\n\nexport default Navbar\n","import React from 'react'\nimport { useSelector } from 'react-redux';\n\nconst CalendarEvent = ({event}) => {\n    const {title, id, user} = event;\n    const {activeEvent} = useSelector(state => state.calendar);\n    return (\n        <div className={(id === activeEvent?.id)? \"event-active\": \"\"}>\n            <strong> {title} </strong>\n            <span>- {user.name}</span>\n        </div>\n    )\n}\n\nexport default CalendarEvent\n","import types from \"../types/types\";\n\nexport const uiOpenModal = () => ({\n    type: types.uiOpenModal\n});\n\nexport const uiCloseModal = () => ({\n    type: types.uiCloseModal\n})\n","import React, { useEffect, useState } from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport Modal from 'react-modal';\nimport moment from 'moment';\nimport DateTimePicker from 'react-datetime-picker';\nimport Swal from 'sweetalert2';\nimport { uiCloseModal } from '../../actions/ui';\nimport { eventClearActive, startAddNewEvent, startUpdateEvent } from '../../actions/eventsCalendar';\n\nconst customStyles = {\n    content : {\n      top                   : '50%',\n      left                  : '50%',\n      right                 : 'auto',\n      bottom                : 'auto',\n      marginRight           : '-50%',\n      transform             : 'translate(-50%, -50%)'\n    }\n};\nModal.setAppElement('#root')\nconst now = moment().minutes(0).seconds(0).add(1, 'hours');\nconst initialEvent = {\n    title: '',\n    notes: '',\n    start: now.toDate(),\n    end: now.add(1, 'hours').toDate(),\n}\n\n\n\nconst CalendarModal = () => {\n\n    /* States */\n    const [startDate, setStartDate] = useState(now.toDate());\n    const [endDate, setEndtDate] = useState(now.add(1, 'hours').toDate());\n    const [formValues, setFormValues] = useState(initialEvent);\n\n    /* Desestructured objects */\n    const {title, notes, start, end} = formValues;\n    \n    /* Redux States */\n    const {modalOpen} = useSelector(state => state.ui);\n    const {activeEvent} = useSelector(state => state.calendar);\n\n    /* Effects */\n    useEffect(() => {\n        if (activeEvent) {\n            setFormValues(activeEvent);\n        } else {\n            setFormValues(initialEvent);\n        }\n    }, [activeEvent]);\n\n    /* Redux operations or Redux handlers */\n    const dispatch = useDispatch();\n    const closeModal = () => {\n        dispatch(\n            uiCloseModal()\n        );\n        dispatch(\n            eventClearActive()\n        );\n        setFormValues(initialEvent);\n    }\n\n    /* Handlers */\n    const handlerChangeForm = ({target}) => {\n        setFormValues({\n            ...formValues,\n            [target.name]: target.value\n        })\n    }\n\n    const handleStartDate = (event) => {\n        setStartDate(event);\n        setFormValues({\n            ...formValues,\n            start: event\n        });\n    }\n    const handlerEndDate = (event) => {\n        setEndtDate(event);\n        setFormValues({\n            ...formValues,\n            end: event\n        });\n    }\n\n    const handlerSubmitForm = (event) => {\n        event.preventDefault();\n        const momentStart = moment(start);\n        const momentEnd = moment(end);\n\n        if (momentStart.isSameOrAfter(momentEnd)) {\n            Swal.fire('Error', 'End Date must be greater than Start Date', 'error');\n            return;\n        } else if (title.trim().length < 2) {\n            Swal.fire('Error', 'Title is mandatory', 'error');\n            return;\n        }\n        if (activeEvent) {\n            dispatch(\n                startUpdateEvent(formValues)\n            )\n        } else {\n            dispatch(\n                startAddNewEvent(formValues)\n            );\n        }\n        closeModal();\n    }\n\n    return (\n        <Modal\n            className=\"modal\"\n            overlayClassName=\"modal-fondo\"\n            closeTimeoutMS={200}\n            isOpen={modalOpen}\n            //   onAfterOpen={afterOpenModal}\n            onRequestClose={closeModal}\n            style={customStyles}\n            contentLabel=\"Example Modal\"\n        >\n            <h1>{(activeEvent)? \"Edit Event\": \"New Event\"}</h1>\n            <hr />\n            <form\n                className=\"container\"\n                onSubmit={handlerSubmitForm}\n            >\n                \n                <div className=\"form-group\">\n                    <label>Start Date</label>\n                    <DateTimePicker\n                        className=\"form-control\"\n                        onChange={handleStartDate}\n                        value={startDate}\n                    />\n                </div>\n                \n                <div className=\"form-group\">\n                    <label>End Date</label>\n                    <DateTimePicker\n                        className=\"form-control\"\n                        minDate={startDate}\n                        onChange={handlerEndDate}\n                        value={endDate}\n                    />\n                </div>\n                <hr />\n                <div className=\"form-group\">\n                    <label>Titulo y notas</label>\n                    <input \n                        type=\"text\" \n                        className=\"form-control\"\n                        placeholder=\"Título del evento\"\n                        name=\"title\"\n                        autoComplete=\"off\"\n                        onChange={handlerChangeForm}\n                        value={title}\n                    />\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Una descripción corta</small>\n                </div>\n                \n                <div className=\"form-group\">\n                    <textarea \n                        type=\"text\" \n                        className=\"form-control\"\n                        placeholder=\"Notas\"\n                        rows=\"5\"\n                        name=\"notes\"\n                        onChange={handlerChangeForm}\n                        value={notes}\n                    ></textarea>\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Información adicional</small>\n                </div>\n                <button\n                    type=\"submit\"\n                    className=\"btn btn-outline-primary btn-block\"\n                >\n                    <i className=\"far fa-save\"></i>\n                    <span> Guardar</span>\n                </button>\n            </form>\n        </Modal>\n    )\n}\n\nexport default CalendarModal\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { eventClearActive } from '../../actions/eventsCalendar';\nimport { uiOpenModal } from '../../actions/ui';\n\nconst AddNewFabButton = () => {\n\n    const dispatch = useDispatch();\n    const handlerOpenModal = () => {\n        dispatch(\n            eventClearActive()\n        );\n        dispatch(\n            uiOpenModal()\n        );\n    }\n\n    return (\n        <button\n            className=\"btn btn-primary fab\"\n            onClick={handlerOpenModal}\n        >\n            <i className=\"fas fa-plus\"></i>\n        </button>\n    )\n}\n\nexport default AddNewFabButton\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { startDeleteEvent } from '../../actions/eventsCalendar';\n\nconst DeleteFabButton = () => {\n\n    const dispatch = useDispatch();\n\n    const handlerDelete = () => {\n        dispatch(\n            startDeleteEvent()\n        );\n    }\n    return (\n        <button\n            className=\"btn btn-danger fab-danger\"\n            onClick={handlerDelete}\n        >\n            <i className=\"fas fa-trash\"></i>\n            <span>Delete</span>\n        </button>\n    )\n}\n\nexport default DeleteFabButton\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {Calendar, momentLocalizer} from 'react-big-calendar';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport moment from 'moment';\nimport Navbar from '../ui/Navbar';\nimport CalendarEvent from './CalendarEvent';\nimport CalendarModal from './CalendarModal';\nimport { uiOpenModal } from '../../actions/ui';\nimport { eventClearActive, eventSetActive, startLoadingEvent } from '../../actions/eventsCalendar';\nimport AddNewFabButton from '../ui/AddNewFabButton';\nimport DeleteFabButton from '../ui/DeleteFabButton';\n\n// Setup the localizer by providing the moment (or globalize) Object\n// to the correct localizer.\nconst localizer = momentLocalizer(moment) // or globalizeLocalizer\n\n\nconst CalendarPage = () => {\n\n    const [lastView, setLastView] = useState(localStorage.getItem('lastView') || 'month');\n\n    const dispatch = useDispatch();\n\n    const {events, activeEvent} = useSelector(state => state.calendar);\n    const {uid} = useSelector(state => state.auth);\n\n    useEffect(() => {\n        dispatch(\n            startLoadingEvent()\n        )\n    }, [dispatch]);\n\n    const onDoubleClick = (event) => {\n        dispatch(\n            uiOpenModal()\n        );\n    }\n    const onSelectEvent = (event) => {\n        dispatch(\n            eventSetActive(event)\n        );\n    }\n    const onViewChange = (event) => {\n        setLastView(event);\n        localStorage.setItem('lastView', event);\n    }\n\n\n    const eventStyleGetter = (event, start, end, isSlected) => {\n        const style = {\n            backgroundColor: (uid === event.user._id)? '#367CF7': '#465660',\n            borderRadius: '0px',\n            opacity: 0.8,\n            display: 'block',\n            color: 'white',\n        }\n        return {style}\n    }\n\n    const onSelectSlot = (event) => {\n        dispatch(\n            eventClearActive()\n        );\n    }\n\n    return (\n        <div className=\"calendar-page\">\n            <Navbar />\n\n            <Calendar\n                localizer={localizer}\n                events={events}\n                startAccessor=\"start\"\n                endAccessor=\"end\"\n                eventPropGetter={eventStyleGetter}\n                components={{\n                    event: CalendarEvent\n                }}\n                onSelectSlot={onSelectSlot}\n                selectable={true}\n                view={lastView}\n                onDoubleClickEvent={onDoubleClick}\n                onSelectEvent={onSelectEvent}\n                onView={onViewChange}\n                \n            />\n\n            <CalendarModal />\n            {\n                (activeEvent) && <DeleteFabButton />\n            }\n            <AddNewFabButton />\n        </div>\n    )\n}\n\nexport default CalendarPage\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect, Route } from 'react-router-dom';\n\nconst PrivateRoute = ({\n    isAuthenticated,\n    component: Component,\n    ...rest\n}) => {\n    localStorage.setItem('lastPath', rest.location.pathname+rest.location.search);\n    return (\n        <Route\n            {...rest}\n            component={(props) => (\n                isAuthenticated?\n                    <Component {...props} />:\n                    <Redirect to=\"/auth/login\" />\n            )}\n        />\n    )\n}\n\nexport default PrivateRoute\n\nPrivateRoute.propTypes = {\n    isAuthenticated: PropTypes.bool.isRequired,\n    component: PropTypes.func.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect, Route } from 'react-router-dom';\n\nconst PublicRoute = ({\n    isAuthenticated,\n    component: Component,\n    ...rest\n}) => {\n    return (\n        <Route \n            {...rest}\n            component={(props) => (\n                (!isAuthenticated)?\n                    (<Component {...props} />):\n                    (<Redirect to=\"/\" />)\n            )}\n        />\n    )\n}\n\nexport default PublicRoute\n\nPublicRoute.propTypes = {\n    isAuthenticated: PropTypes.bool.isRequired,\n    component: PropTypes.func.isRequired\n}","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Redirect\n} from \"react-router-dom\";\nimport { startChecking } from '../actions/auth';\nimport LoginPage from '../components/auth/LoginPage';\nimport CalendarPage from '../components/calendar/CalendarPage';\nimport PrivateRoute from './PrivateRoute';\nimport PublicRoute from './PublicRoute';\n  \nconst AppRouter = () => {\n\n    const dispatch = useDispatch();\n    const {checking, uid} = useSelector((state) => state.auth);\n\n    useEffect(() => {\n        dispatch(startChecking());\n    }, [dispatch]);\n\n    if (checking) {\n        return (\n            <div className=\"loading\">\n                <h5 >Loading...</h5>\n            </div>\n        ) \n    }\n\n    return (\n        <Router>\n            <div>\n                <Switch>\n                    <PublicRoute\n                        exact\n                        path=\"/login\"\n                        component={LoginPage}\n                        isAuthenticated={!!uid}\n                    />\n                    <PrivateRoute\n                        exact\n                        path=\"/\"\n                        component={CalendarPage}\n                        isAuthenticated={!!uid}\n                    />\n                    <Redirect to=\"/login\" />\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nexport default AppRouter\n","import types from \"../types/types\";\n\nconst initialState = {\n    checking: true,\n    uid: null,\n    name: null,\n\n}\n\nconst authReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case types.authLogin:\n            return {\n                ...state,\n                checking: false,\n                ...action.payload\n            }\n        case types.authChekingFinish:\n            return {\n                ...state,\n                checking: false\n            }\n        case types.authLogout:\n            return {\n                checking: false\n            }\n        default:\n            return state;\n    }\n\n}\n\nexport default authReducer;","import types from '../types/types';\n\n// {\n//     id: new Date().getDate(),\n//     title: 'Boss birth',\n//     start: moment().toDate(),\n//     end: moment().add(2, 'hour').toDate(),\n//     bgcolor: '#fafafa',\n//     user: {\n//         _id: '123',\n//         name: 'Angello',\n//     }\n// }\n\nconst initialState = {\n    events: [],\n    activeEvent: null\n}\n\nconst calendarReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case types.eventSetActive:\n            return {\n                ...state,\n                activeEvent: action.payload\n            };\n        case types.eventAddNew:\n            return {\n                ...state,\n                events: [...state.events, action.payload]\n            };\n        case types.eventClearActive:\n            return {\n                ...state,\n                activeEvent: null\n            }\n        case types.eventUpdate:\n            return {\n                ...state,\n                events: state.events.map(\n                    event => (event.id === action.payload.id) ? action.payload : event \n                )\n            }\n        case types.eventDelete:\n            console.log(action);\n            return {\n                ...state,\n                events: state.events.filter(\n                    event => (event.id !== state.activeEvent.id) \n                ),\n                activeEvent: null\n            }\n        case types.eventLoaded:\n            return {\n                ...state,\n                events: [...action.payload]\n            }\n        case types.eventClearOnLogout:\n            return {...initialState}\n        default:\n            return state;\n    }\n}\n\nexport default calendarReducer;","import types from \"../types/types\";\n\nconst initialState = {\n    modalOpen: false,\n\n}\n\nconst uiReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case types.uiOpenModal:\n            return {\n                ...state,\n                modalOpen: true\n            }\n        case types.uiCloseModal:\n            return {\n                ...state,\n                modalOpen: false\n            }\n        default:\n            return state;\n    }\n}\n\nexport default uiReducer\n","/* rootReducer is the combination of all my app reducers */\nimport {combineReducers} from 'redux';\nimport authReducer from './authReducer';\nimport calendarReducer from './calendarReducer';\nimport uiReducer from './uiReducers';\n\n\nconst rootReducer = combineReducers({\n    ui: uiReducer,\n    calendar: calendarReducer,\n    auth: authReducer\n})\n\nexport default rootReducer;\n","import {createStore, compose, applyMiddleware} from 'redux';\nimport rootReducer from '../reducers/rootReducer';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(\n        applyMiddleware( thunk )\n    )\n);\n","import React from 'react';\nimport {Provider} from 'react-redux';\nimport AppRouter from './router/AppRouter';\nimport { store } from './store/store';\n\nconst Calendar = () => {\n    return (\n        <Provider store={store}>\n            <AppRouter />\n        </Provider>\n    )\n}\n\nexport default Calendar\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calendar from './Calendar';\nimport './styles.css';\n\nReactDOM.render(\n  <Calendar />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}